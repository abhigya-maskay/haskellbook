* Chapter Execises
** Multiple Choice
1. a)
2. c)
3. b) 4. c)
** Ciphers
#+NAME: ciphers
#+BEGIN_SRC haskell :tangle chapter-exercise-cipher.hs :comments link
module Cipher where

import Data.Char

charWidth :: Int
charWidth = 26

getLeftAnchor :: Int -> Int
getLeftAnchor x = if isUpper (chr x) then ord 'A' else ord 'a'

shiftRightInt :: Int -> Int -> Int
shiftRightInt shifter charInt = (charInt + shifter - leftAnchor) `mod` charWidth + leftAnchor
  where
    leftAnchor = getLeftAnchor charInt

shiftRight :: Int -> Char -> Char
shiftRight shifter x =
  if isAlpha x
    then chr . shiftRightInt shifter . ord $ x
    else x

caesar :: Int -> String -> String
caesar shifter = map (shiftRight shifter)

uncaesar :: Int -> String -> String
uncaesar shifter = map reverseShift
  where
    reverseShift = shiftRight (-shifter)

newtype Keyword = Keyword String deriving Show
newtype Message = Message String deriving Show
newtype EncodedMessage = EncodedMessage String deriving Show

data Paired a b = Skipped b | Paired a b

pair :: String -> String -> [Paired Char Char]
pair k m = reverse . go k m $ []
  where
    go _ "" acc = acc
    go "" m acc = go k m acc
    go keyword@(k:ks) (m:ms) acc
      | isAlpha m = go ks ms ((Paired k m):acc)
      | otherwise = go keyword ms ((Skipped m):acc)

getShift :: Char -> Int
getShift x = ((ord x -) . getLeftAnchor . ord $ x)

getPairShifts :: [Paired Char Char] -> [Paired Int Char]
getPairShifts = map f
  where
    f (Paired x y) = Paired (getShift x) y
    f (Skipped y) = Skipped y

shiftCharRight :: Paired Int Char -> Char
shiftCharRight (Paired s c) = shiftRight s c
shiftCharRight (Skipped c) = c

shiftCharLeft :: Paired Int Char -> Char
shiftCharLeft (Paired s c) = shiftCharRight (Paired (-s) c)
shiftCharLeft p = shiftCharRight p


vignere :: Keyword -> Message -> EncodedMessage
vignere (Keyword k) (Message m) = EncodedMessage . map shiftCharRight . getPairShifts . pair k $ m

unvignere :: Keyword -> EncodedMessage -> Message
unvignere (Keyword k) (EncodedMessage em) = Message . map shiftCharLeft . getPairShifts . pair k $ em
#+END_SRC
** As Patterns
#+BEGIN_SRC haskell :tangle chapter-exercise-as-patterns.hs :comments link

import Data.Char (toUpper)
import Data.List (elemIndex)

isSubSeqOf :: (Eq a) => [a] -> [a] -> Bool
isSubSeqOf subxs xs = go subxs xs (Just (-1))
  where
    go [] xs acc = True
    go (subx : subxs) xs acc =
      if currentIndex > acc
        then go subxs xs currentIndex
        else False
      where
        currentIndex = subx `elemIndex` xs
#+END_SRC

#+BEGIN_SRC haskell :tangle chapter-exercise-as-patterns.hs :comments link
capitalizeWords :: String -> [(String, String)]
capitalizeWords = map capAndPair . words
  where
    capAndPair word@(x : xs) = (word, (: xs) . toUpper $ x)
#+END_SRC
** Language Exercise
#+BEGIN_SRC haskell :tangle chapter-exercise-language-exercise.hs :comments link
import Data.Char (toUpper)
import Data.List (intersperse, splitAt)

capitalizeWord :: String -> String
capitalizeWord "" = ""
capitalizeWord (x : xs) = (: xs) . toUpper $ x

capitalizeParagraph :: String -> String
capitalizeParagraph = foldr (++) "" . intersperse ". " . map capitalizeWord . breakParagraph
  where
    breakParagraph :: String -> [String]
    breakParagraph s = go s []
      where
        go "" acc = reverse acc
        go s acc =
          let paragraph = takeWhile (/= '.') s
              remainingString = drop 2 . dropWhile (/= '.') $ s
           in go remainingString (paragraph : acc)
#+END_SRC

** Phone Exercise

*** 1)
#+BEGIN_SRC haskell :tangle chapter-exercise-phone-exercise.hs :comments link
import Data.Char (isUpper, toLower)
import Data.List (elemIndex, maximumBy, group, sort)
import Data.Ord (comparing)
import Data.Maybe (maybe, maybeToList)

data DaPhone = DaPhone [(Char, String)]

phone =
  DaPhone
    [ ('1', "1"),
      ('2', "abc2"),
      ('3', "def3"),
      ('4', "ghi4"),
      ('5', "jkl5"),
      ('6', "mno6"),
      ('7', "pqrs7"),
      ('8', "tuv8"),
      ('9', "wxyz9"),
      ('0', " 0"),
      ('#', ".,#")
    ]

convo :: [String]
convo =
  [ "Wanna play 20 questions",
    "Ya",
    "U 1st haha",
    "Lol OK. Have u ever tasted alcohol",
    "Lol ya",
    "Wow ur cool haha. Ur turn",
    "OK. Do u thing I am pretty Lol",
    "Lol ya",
    "Just making sure rofl ur turn"
  ]
#+END_SRC
*** 2)
#+BEGIN_SRC haskell :tangle chapter-exercise-phone-exercise.hs :comments link
type Digit = Char

type Presses = Int

findKey :: DaPhone -> Char -> (Char, String)
findKey (DaPhone phone) c = head . filter hasChar $ phone
  where
    lowerC = toLower c
    hasChar = elem lowerC . snd

findPresses :: (Char, String) -> Char -> [(Digit, Presses)]
findPresses (p, s) c = if (isUpper c) then shift : charPress else charPress
  where
    lowerC = toLower c
    shift = ('*', 1)
    charPress = map (p,) . maybeToList . fmap (+ 1) . elemIndex lowerC $ s

reverseTaps :: DaPhone -> Char -> [(Digit, Presses)]
reverseTaps phone c = findPresses key c
  where
    key = findKey phone c

cellPhonesDead :: DaPhone -> String -> [(Digit, Presses)]
cellPhonesDead phone = concat . map (reverseTaps phone)
#+END_SRC
*** 3)
#+BEGIN_SRC haskell :tangle chapter-exercise-phone-exercise.hs :comments link
fingerTaps :: [(Digit, Presses)] -> Presses
fingerTaps = sum . map snd
#+END_SRC

*** 4)
#+BEGIN_SRC haskell :tangle chapter-exercise-phone-exercise.hs :comments link
mostPopular :: [a] -> a
mostPopular = head . maximumBy (comparing length) . group . sort

costOfLetter :: Char -> String -> Presses
costOfLetter c s =  fingerTaps . cellPhonesDead phone . filter (== c) $ s

mostPopularAndCost ::  String -> (Char, Presses)
mostPopularAndCost s = (popularLetter, costOfLetter popularLetter s)
  where
    popularLetter = mostPopular s
#+END_SRC

*** 5)
#+BEGIN_SRC haskell :tangle chapter-exercise-phone-exercise.hs :comments link
coolestLtr :: [String] -> Char
coolestLtr = mostPopular . concat

coolestWord :: [String] -> String
coolestWord = mostPopular
#+END_SRC

** Hutton's Razor

*** 1)
#+NAME: hutton-one
#+BEGIN_SRC haskell :tangle chapter-exercise-hutton-razor.hs :comments link
data Expr = Lit Integer
  | Add Expr Expr

eval :: Expr -> Integer
eval (Lit x) = x
eval (Add x y) = (eval x) + (eval y)

printExpr :: Expr -> String
printExpr (Lit x) = show x
printExpr (Add x y) = printExpr x ++ " + " ++ printExpr y
#+END_SRC

*** 2)
#+NAME: hutton-two
#+BEGIN_SRC haskell :tangle chapter-exercise-hutton-razor.hs :comments link
printExpr :: Expr -> String
printExpr (Lit x) = show x
printExpr (Add x y) = printExpr x ++ " + " ++ printExpr y
#+END_SRC
