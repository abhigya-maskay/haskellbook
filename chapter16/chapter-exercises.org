* Chapter Exercises
** Valid Functor
1) Cannot write a valid functor because the type is of kind `*`.
2) Can write a valid functor
3) Can write a valid functor
4) Can write a valid functor
5) Cannot write a valid functor because the type is of kind `*`
** Constructors
1)
#+BEGIN_SRC haskell :tangle chapter-exercises-constructors.hs :comments link
data Sum b a = First a | Second b deriving (Show, Eq)

instance Functor (Sum e) where
  fmap f (First a) = First (f a)
  fmap _ (Second b) = Second b
#+END_SRC
2)
#+BEGIN_SRC haskell :tangle chapter-exercises-constructors.hs :comments link
data Company a c b =
  DeepBlue a c
  | Something b deriving (Eq, Show)

instance Functor (Company e e') where
  fmap f (Something b) = Something (f b)
  fmap _ (DeepBlue a c) = DeepBlue a c
#+END_SRC
3)
#+BEGIN_SRC haskell :tangle chapter-exercises-constructors.hs :comments link
data More b a =
  L a b a
  | R b a b
  deriving (Eq, Show)

instance Functor (More x) where
  fmap f (L a b a') = L (f a) b (f a')
  fmap f (R b a b') = R b (f a) b'
#+END_SRC

** Writing instances
1)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
{-# LANGUAGE FlexibleInstances #-}
data Quant a b = Finance | Desk a | Bloor b deriving (Show, Eq)

instance Functor (Quant a) where
  fmap _ Finance = Finance
  fmap f (Desk a) = Desk a
  fmap f (Bloor b) = Bloor (f b)
#+END_SRC
2)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data K a b = K a

instance Functor (K a) where
  fmap f (K a) = K a
#+END_SRC
3)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
newtype Flip f a b =
  Flip (f b a)
  deriving (Eq, Show)

newtype K' a b = K' a

instance Functor (Flip K' a) where
  fmap f (Flip (K' a)) = Flip (K' (f a))
#+END_SRC

4)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data EvilGoateeConst a b =
  GoatyConst b

instance Functor (EvilGoateeConst a) where
  fmap f (GoatyConst a) = GoatyConst (f a)
#+END_SRC

5)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data LiftItOut f a = LiftItOut (f a)

instance Functor f => Functor (LiftItOut f) where
  fmap f (LiftItOut x) = LiftItOut (f <$> x)
#+END_SRC

6)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data Parappa f g a =
  DaWrappa (f a) (g a)

instance (Functor f, Functor g) => Functor (Parappa f g) where
  fmap f (DaWrappa x y) = DaWrappa (f <$> x) (f <$> y)
#+END_SRC

7)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data IgnoreOne f g a b =
  IgnoringSomething (f a) (g b)

instance (Functor g) => Functor (IgnoreOne f g a) where
  fmap f (IgnoringSomething x y) = IgnoringSomething x (f <$> y)
#+END_SRC

8)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data Notorious g o a t = Notorious (g o) (g a) (g t)

instance Functor g => Functor (Notorious g o a) where
  fmap f (Notorious x y z) = Notorious x y (f <$> z)
#+END_SRC

9)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data List a = Nil | Cons a (List a)

instance Functor List where
  fmap _ Nil = Nil
  fmap f (Cons x xs) = Cons (f x) (fmap f xs)
#+END_SRC

10)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data GoatLord a =
  NoGoat
  | OneGoat a
  | MoreGoats (GoatLord a) (GoatLord a) (GoatLord a)

instance Functor GoatLord where
  fmap _ NoGoat = NoGoat
  fmap f (OneGoat a) = OneGoat (f a)
  fmap f (MoreGoats x y z) = MoreGoats (f <$> x) (f <$> y)  (f <$> z)
#+END_SRC

ll)
#+BEGIN_SRC haskell :tangle chapter-exercises-functor-instances.hs :comments link
data TalkToMe a =
#+END_SRC
